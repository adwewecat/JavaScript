

ECMAScript 6 ra đời đầu năm 2015 , 
là chuẩn hóa của JavaScript nhưng 1 số trình duyệt không support


90 . 99.
zống nhau zữ let / const / var là đều dùng để định nghĩa ra 1 biến

1. let / const / --> khác với var : 
scope(phạm vi truy cập) , Hotting , Assignment (tính gán lại giá trị)

let , const : phạm vi truy cập chỉ ở trong phần ngoặc của nó được khai báo
let, const  : không có tính hosting (là tự động đưa phần khai báo biến lên trên đầu)
const : Không thể gán lại biến lần 2 , let và var thì được


code thuần : var 
code có thư viện babel : let / const
--------------------------------------------------------------------------------------------------




100. template Literals
có dấu \ trước chữ nếu muốn nó là string thông thường
const lines = ` line 1 ${id}
line 2
line 3`;
-----------------------------------------------------------





101.Arrow function
Hàm Mũi tên 

VD :
function logger(log){
    console.log(log)
}

viết ra như sau :
(log) => {
    console.log(log)
}


VD 2 :
const sum = (a , b) => {
    return a+b;
}

viết như sau : 
const sum = (a,b) => a+b 

cách trả về biến object 
const sum = (a,b) => ({a:a , b:b});
---------------------------------------------------------





102. Classes
Cách 1 : 
function Course (name,price) {
    this.name = name;
    this.price = price;
}

Cách 2: Dùng Classes
class Course {
    constructor(name,price){
        this.name = name;
        this.price = price;
    }
}

const phpCourse = new Course('PHP',100);
const jsCourse = new Course('Javasript',200);
----------------------------------------------------




103 . Default pagrameter value

function logger(log){
    if (typeof log === 'undefined'){
        log = 'Giá trị mặc định'
    }
    console.log(log)
}

function logger(log, type = 'log'){
    console[type] (log);
}
---------------------------------------------------------\\




104. Enhanced Object literals
-- Định nghĩa key : value cho object 
-- Định nghĩa method cho object 
-- Định nghĩa key cho object dưới dạng ngắn gọn hơn

var name = 'JavaScript'
var price = 1000
var fieldPriceNew = 'priceNew'

var Course ={
    name:name,
    price:price
    getName: function(){
        return name;
    }
}

Cách viết khác theo Enhanced Object literals

var Course ={
    name,
    price
    getName(){
        return name;
    }
    [fieldPriceNew]: '1000'
}
--------------------------------------------------------------




105. Destructuring / Rest parameters
-- Destructuring : Phân rã , áp dụng với Object và Array
-- Rest parameters : áp dụng để lấy ra các phần tử còn lại 
    của mảng khi áp dụng chung với Destructuring

var myArray = ['JavaScript', 'PHP', 'Ruby']
var myObject = {
    name: "JavaScript",
    price: 120,
    children: {
        name: "ReactJS"
    }
}

Cách cũ : 
var a = myArray[0]
var b = myArray[1]
var c = myArray[2]

CÁCH Mới : 
var [a, b, c] = myArray;
-- chỉ muốn lấy a và c  var [a, ,c] = myArray
-- Lấy a và các giá trị còn lại của mảng 
    var [a, ...rest] = myArray


-- var {name , ...rest} = myObject
-- Muốn lấy name của children nhưng do trùng tên nên phải đổi tên name bên ngoài bằng dấu ":" : 
    var {name:newName , children: {name}}

function logger (...pagrams) {
    console.log(pagrams)
} --> được hiểu là lấy phần tử còn lại, nhưng do phía trước không lấy gì 
        nên nó hiểu là lấy hết

VD : 
function logger ({name, price, ...rest}){
    console.log(a)
    console.log(b)
    console.log(rest)
}
logger(
    {
    name:"Nguyễn Anh Dũng"
    price: vô cực
    description:"Không Mô Tả"
    }
)
-----------------------------------------------------------------------------------





106. Spread : Toán tử giải bỏ đi dấu ngoặc nếu dùng với Array va Object 

var myArray = ['JavaScript', 'PHP', 'Ruby']
var myArray2 = ['ReactJS', 'Java', 'C++']

VD nối myArray và myArray2 thành 1 mảng 

var myArray3 = [...]









